esphome:
  name: testdevice
  friendly_name: TestDevice

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "i9F3/CGTQ1FtxwJ5FHP8fE5QOUY/DP8n+KeG1iM4dYw="


ota:
  - platform: esphome
    password: "3cd8dc1b92701bcd0909ad94af44edcc"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Testdevice Fallback Hotspot"
    password: "kRKFGZlIsGRx"

web_server:

captive_portal:


uart:
  - id: haier_uart
    baud_rate: 9600
    tx_pin: 19
    rx_pin: 18
    # tx_pin: 17
    # rx_pin: 16    
  - id: uart_modbus_server
    baud_rate: 9600
    tx_pin: 17
    rx_pin: 16    

modbus:
  - uart_id: uart_modbus_server
    id: modbus_server
    role: server

modbus_controller:
  - modbus_id: modbus_server
    address: 0x1F
    # server_coil_registers:
    #   - address: 1
    #     read_lambda: |-
    #       ESP_LOGI("modbus_server", "0x0001 READ");
    #       return 1;
    #     write_lambda: |-
    #       ESP_LOGI("modbus_server", "0x0001 WRITE");
    #       return 1;
    server_registers:
      - address: 0x0001
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0001 READ");
          return 1;
        write_lambda: |-
          ESP_LOGI("modbus_server", "0x0001 WRITE");
          return 1;
      - address: 0x0002 # Screen light" TODO: change to COIL
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0002 READ -> %d", id(haier_display_switch).state ? 1 : 0);
          return id(haier_display_switch).state ? 1 : 0;
        write_lambda: |-
          ESP_LOGI("modbus_server", "0x0002 WRITE <- %d", x);
          if (x != 0) {
            id(haier_display_switch).turn_on2();
          } else {
            id(haier_display_switch).turn_off();
          }
          return x;
      - address: 0x0003
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0003 READ");
          return 1;
      - address: 0x0004
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0004 READ");
          return 1;
      - address: 0x0005
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0005 READ");
          return 1;
      - address: 0x0006
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0006 READ");
          return 1;
      - address: 0x0007
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0007 READ");
          return 1;
      - address: 0x0008
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0008 READ");
          return 1;
      - address: 0x0009
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0009 READ");
          return 1;
      - address: 0x000A
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x000A READ");
          return 1;
      - address: 0x000B
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x000B READ");
          return 1;
      - address: 0x0014
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0014 READ");
          return 1;
      - address: 0x0015
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0015 READ");
          return 1;
      - address: 0x0080
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x0080 READ");
          return 1;
      - address: 0x00C9
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x00C9 READ");
          return 1;
      - address: 0x00FA
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x00FA READ");
          return 1;
      - address: 0x00FB
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x00FB READ");
          return 1;
      - address: 0x00FC
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x00FC READ");
          return 1;
      - address: 0x00FD
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x00FD READ");
          return 1;
      - address: 0x00FE
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x00FE READ");
          return 1;
      - address: 0x00FF
        value_type: U_WORD
        read_lambda: |-
          ESP_LOGI("modbus_server", "0x00FF READ");
          return 1;



climate:
  - platform: haier
    id: haier_ac
    protocol: smartAir2
    name: Haier SmartAir2 Climate
    uart_id: haier_uart
    alternative_swing_control: false
    wifi_signal: true
    visual:
      min_temperature: 16 °C
      max_temperature: 30 °C
      temperature_step: 1 °C
    supported_modes:
      - 'OFF'
      - HEAT_COOL
      - COOL
      - HEAT
      - DRY
      - FAN_ONLY
    supported_swing_modes:
      - 'OFF'
      - VERTICAL
      - HORIZONTAL
      - BOTH
    supported_presets:
      - BOOST
      - COMFORT
      - AWAY

switch:
  - platform: haier
    health_mode:
      name: Haier health mode
    display:
      id: haier_display_switch
      name: Haier display
  # - platform: template
  #   name: "${friendly_name} Comfort Mode"
  #   id: comfort_preset
  #   icon: "mdi:weather-night"
  #   lambda: |-
  #     if (id(haier_ac).preset.has_value()) {
  #       return id(haier_ac).preset.value() == climate::CLIMATE_PRESET_COMFORT;
  #     }
  #     return false;
  #   turn_on_action:
  #     - climate.set_preset:
  #         id: haier_ac
  #         preset: COMFORT
  #   turn_off_action:
  #     - climate.set_preset:
  #         id: haier_ac
  #         preset: NONE      

